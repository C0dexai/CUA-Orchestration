
import React, { useState, useCallback, useEffect } from 'react';
import { type LlmStrategy, type OrchestrationStatus, type DualLlmTask, type TaskStatus, type GeneratedSpa, type LlmName, type SpaFile } from '../types';
import { CODEX_DATA } from '../constants';
import { LoaderIcon, AbacusIcon, GeminiIcon, OpenAiIcon } from './icons';

interface DualLlmControlTabProps {
    onOrchestrationComplete: (spa: GeneratedSpa) => void;
    missionToReenact: GeneratedSpa | null;
    onClearReenactMission: () => void;
}

const planMission = (objective: string, agents: string[], strategy: LlmStrategy): DualLlmTask[] => {
    const tasks: DualLlmTask[] = [];
    let taskId = 1;

    const getLlmForTask = (): LlmName => {
        if (strategy === 'GEMINI_PRIMARY') return 'gemini';
        if (strategy === 'OPENAI_PRIMARY') return 'openai';
        if (strategy === 'ABACUS_PRIMARY') return 'abacus';
        // TRIPLE_DYNAMIC
        const llms: LlmName[] = ['gemini', 'openai', 'abacus'];
        return llms[Math.floor(Math.random() * llms.length)];
    }

    const addTask = (agent: string, description: string, deps: number[] = []) => {
        tasks.push({ id: taskId++, description, agent, llm: getLlmForTask(), status: 'pending', dependencies: deps });
        return taskId - 1;
    }
    
    const designId = addTask('LYRA', 'Design overall architecture');
    const scaffoldId = addTask('KARA', 'Scaffold main components', [designId]);
    const securityId = addTask('SOPHIA', 'Review security protocols', [scaffoldId]);
    const docsId = addTask('CECILIA', 'Generate documentation', [scaffoldId]);
    addTask('MISTRESS', 'Create deployment pipeline', [securityId, docsId]);

    return tasks;
};

const generateSpaFiles = (objective: string): SpaFile[] => {
    return [
        {
            name: 'index.html',
            language: 'html',
            content: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${objective}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="root"></div>
    <script type="module" src="App.js"></script> <!-- Assuming a build step -->
</body>
</html>`
        },
        {
            name: 'App.tsx',
            language: 'tsx',
            content: `import React from 'react';
import ReactDOM from 'react-dom/client';
import './styles.css';

interface AppProps {
  objective: string;
}

const App = ({ objective }: AppProps) => {
  return (
    <main>
      <h1>Mission: {objective}</h1>
      <p>This Single Page Application was dynamically generated by the CUA Orchestration Engine.</p>
      <p>It serves as a tangible artifact of a completed mission.</p>
    </main>
  );
};

const root = ReactDOM.createRoot(document.getElementById('root')!);
root.render(<App objective="${objective}" />);`
        },
        {
            name: 'types.ts',
            language: 'typescript',
            content: `// Type definitions for the generated application.

export interface MissionData {
  id: string;
  objective: string;
  agents: string[];
  status: 'completed' | 'failed';
}`
        },
        {
            name: 'styles.css',
            language: 'css',
            content: `body {
  background-color: #0b0e11;
  color: #F5F5F7;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  margin: 0;
}

main {
  text-align: center;
  padding: 2rem;
  border-radius: 16px;
  background: rgba(18, 18, 21, 0.28);
  border: 1px solid rgba(255, 255, 255, 0.15);
  box-shadow: 0 8px 30px rgba(0,0,0,.35);
}`
        }
    ];
};

const LlmIcon = ({ llm }: { llm: LlmName }) => {
    switch (llm) {
        case 'gemini':
            return <GeminiIcon className="w-5 h-5" />;
        case 'openai':
            return <OpenAiIcon className="w-5 h-5" />;
        case 'abacus':
            return <AbacusIcon className="w-5 h-5 text-yellow-400" />;
        default:
            return null;
    }
}

const TaskCard = ({ task }: { task: DualLlmTask }) => {
    const getStatusColor = () => {
        switch(task.status) {
            case 'completed': return 'border-green-500';
            case 'running': return 'border-blue-500 animate-pulse';
            case 'error': return 'border-red-500';
            default: return 'border-gray-600';
        }
    }
    return (
        <div className={`p-3 bg-gray-900/80 rounded-lg border-l-4 ${getStatusColor()}`}>
            <div className="flex justify-between items-center">
                <p className="font-bold text-white">{task.agent}</p>
                <LlmIcon llm={task.llm} />
            </div>
            <p className="text-sm text-gray-300 mt-1">{task.description}</p>
            {task.status === 'running' && <div className="mt-2"><LoaderIcon className="w-4 h-4 text-blue-400" /></div>}
        </div>
    );
};

export default function DualLlmControlTab({ onOrchestrationComplete, missionToReenact, onClearReenactMission }: DualLlmControlTabProps): React.ReactNode {
    const [objective, setObjective] = useState('Develop, secure, and document a new user authentication API.');
    const [selectedAgents, setSelectedAgents] = useState<string[]>(['LYRA', 'KARA', 'SOPHIA', 'CECILIA', 'MISTRESS']);
    const [strategy, setStrategy] = useState<LlmStrategy>('TRIPLE_DYNAMIC');
    const [status, setStatus] = useState<OrchestrationStatus>('idle');
    const [tasks, setTasks] = useState<DualLlmTask[]>([]);
    const [logs, setLogs] = useState<{ gemini: string[], openai: string[], abacus: string[] }>({ gemini: [], openai: [], abacus: [] });
    const [lastCompletedSpa, setLastCompletedSpa] = useState<GeneratedSpa | null>(null);

    useEffect(() => {
        if (missionToReenact) {
            setObjective(missionToReenact.objective);
            setStrategy(missionToReenact.strategy);
            setSelectedAgents(missionToReenact.agents);
            
            setStatus('idle');
            setTasks([]);
            setLogs({ gemini: [], openai: [], abacus: [] });
            setLastCompletedSpa(null);

            onClearReenactMission();
        }
    }, [missionToReenact, onClearReenactMission]);

    const handleAgentToggle = (agentName: string) => {
        setSelectedAgents(prev => prev.includes(agentName) ? prev.filter(name => name !== agentName) : [...prev, agentName]);
    };

    const runOrchestration = useCallback(async (missionTasks: DualLlmTask[]) => {
        setStatus('running');
        let currentTasks = [...missionTasks];
        let completedIds: number[] = [];
        let running = true;

        while(running) {
            const runnableTasks = currentTasks.filter(t => t.status === 'pending' && t.dependencies.every(depId => completedIds.includes(depId)));

            if (runnableTasks.length === 0 && currentTasks.every(t => t.status !== 'running')) {
                running = false;
                continue;
            }

            for (const task of runnableTasks) {
                currentTasks = currentTasks.map(t => t.id === task.id ? { ...t, status: 'running' as TaskStatus } : t);
                setTasks([...currentTasks]);

                await new Promise(res => setTimeout(res, 1000 + Math.random() * 1500));

                const logMessage = `[${task.agent}] completed: ${task.description}`;
                setLogs(prev => ({ ...prev, [task.llm]: [...prev[task.llm], logMessage]}));

                completedIds.push(task.id);
                currentTasks = currentTasks.map(t => t.id === task.id ? { ...t, status: 'completed' as TaskStatus } : t);
                setTasks([...currentTasks]);
            }
             await new Promise(res => setTimeout(res, 500));
        }
        setStatus('completed');
        const command = `orchestrate run --objective "${objective}" --agents='${JSON.stringify(selectedAgents)}' --strategy='${strategy}'`;
        const spaFiles = generateSpaFiles(objective);
        
        const newSpa: GeneratedSpa = {
            id: `SPA-${Date.now().toString().slice(-4)}`,
            objective,
            command,
            agents: selectedAgents,
            strategy,
            tasks: currentTasks,
            summary: { stages: currentTasks.map(t => ({ name: t.description, agent: t.agent })) },
            createdAt: Date.now(),
            files: spaFiles,
        };
        setLastCompletedSpa(newSpa);

    }, [objective, selectedAgents, strategy]);

    const handleInitiate = () => {
        if (!objective || selectedAgents.length === 0) return;
        setStatus('planning');
        setTasks([]);
        setLogs({ gemini: [], openai: [], abacus: [] });
        setLastCompletedSpa(null);
        
        setTimeout(() => {
            const missionTasks = planMission(objective, selectedAgents, strategy);
            setTasks(missionTasks);
            runOrchestration(missionTasks);
        }, 1000);
    };
    
    const handleRegisterSpa = () => {
        if (lastCompletedSpa) {
            onOrchestrationComplete(lastCompletedSpa);
        }
    };

    const isBusy = status === 'planning' || status === 'running';

    return (
        <div className="glass neon p-6">
            <h2 className="text-3xl font-bold text-white mb-6 text-center">Dual-LLM Control Center</h2>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Column 1: Config */}
                <div className="lg:col-span-1 space-y-6">
                    <div>
                        <h3 className="text-xl font-bold text-white mb-2">1. Mission Objective</h3>
                        <textarea
                            value={objective}
                            onChange={(e) => setObjective(e.target.value)}
                            rows={4}
                            className="w-full bg-gray-900 border border-gray-700 rounded-lg p-3 text-white transition-all duration-300 input-glow-green"
                            placeholder="Define the high-level mission..."
                            disabled={isBusy}
                        />
                         <div className="mt-2 grid grid-cols-3 gap-2">
                            <button onClick={() => setObjective("Generate a multi-modal presentation for a new product launch, including text, images, and a script outline.")} className="flex items-center justify-center gap-2 text-xs p-2 rounded-md bg-gray-700 hover:bg-gray-600 transition-colors"><GeminiIcon className="w-4 h-4" /> Suggest</button>
                            <button onClick={() => setObjective("Draft a comprehensive technical specification for a secure, scalable REST API with user authentication and role-based access control.")} className="flex items-center justify-center gap-2 text-xs p-2 rounded-md bg-gray-700 hover:bg-gray-600 transition-colors"><OpenAiIcon className="w-4 h-4" /> Suggest</button>
                            <button onClick={() => setObjective("Analyze the provided quarterly sales data, identify key trends, and create a precise forecast model for the next two quarters.")} className="flex items-center justify-center gap-2 text-xs p-2 rounded-md bg-gray-700 hover:bg-gray-600 transition-colors"><AbacusIcon className="w-4 h-4" /> Suggest</button>
                        </div>
                    </div>
                    <div>
                        <h3 className="text-xl font-bold text-white mb-2">2. Assign Agents</h3>
                        <div className="grid grid-cols-2 gap-2 text-sm">
                            {CODEX_DATA.ai_family.map(agent => (
                                <label key={agent.name} className={`flex items-center space-x-2 p-2 rounded-md cursor-pointer ${selectedAgents.includes(agent.name) ? 'bg-indigo-600/80' : 'bg-gray-700/60'}`}>
                                    <input type="checkbox" checked={selectedAgents.includes(agent.name)} onChange={() => handleAgentToggle(agent.name)} className="form-checkbox text-indigo-500 bg-gray-800 border-gray-600 rounded focus:ring-indigo-500 h-4 w-4" disabled={isBusy} />
                                    <span>{agent.name}</span>
                                 </label>
                            ))}
                        </div>
                    </div>
                     <div>
                        <h3 className="text-xl font-bold text-white mb-2">3. LLM Strategy</h3>
                         <select value={strategy} onChange={e => setStrategy(e.target.value as LlmStrategy)} className="w-full bg-gray-900 border border-gray-700 rounded-lg p-3 text-white transition-all duration-300 input-glow-green" disabled={isBusy}>
                            <option value="TRIPLE_DYNAMIC">Triple Dynamic (Auto-Select)</option>
                            <option value="GEMINI_PRIMARY">Gemini Primary</option>
                            <option value="OPENAI_PRIMARY">OpenAI Primary</option>
                            <option value="ABACUS_PRIMARY">Abacus Primary</option>
                        </select>
                    </div>
                    <button onClick={handleInitiate} className="w-full gemini-btn text-white font-bold py-3 px-6 rounded-lg shadow-lg flex items-center justify-center" disabled={isBusy}>
                        {isBusy && <LoaderIcon className="w-5 h-5 mr-2"/>}
                        {status === 'idle' && 'Initiate Orchestration'}
                        {status === 'planning' && 'Planning Mission...'}
                        {status === 'running' && 'Orchestration in Progress...'}
                        {(status === 'completed' || status === 'failed') && 'Run Again'}
                    </button>
                    {status === 'completed' && lastCompletedSpa && (
                        <div className="mt-4 p-4 bg-green-900/30 rounded-lg border border-green-500/50 glow-green">
                            <h4 className="text-lg font-bold text-green-300">Mission Complete</h4>
                            <p className="text-sm font-mono text-green-200 mt-2 break-words">{lastCompletedSpa.command}</p>
                            <button onClick={handleRegisterSpa} className="mt-4 w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg">
                                Generate & Register SPA
                            </button>
                        </div>
                    )}
                </div>
                {/* Column 2: Execution Flow */}
                <div className="lg:col-span-1">
                     <h3 className="text-xl font-bold text-white mb-2">Real-time Execution Flow</h3>
                     <div className="p-4 bg-black/30 rounded-lg h-[500px] overflow-y-auto space-y-3 glow-green border border-green-500/30">
                        {tasks.length === 0 && <p className="text-gray-400 text-center mt-8">Awaiting orchestration...</p>}
                        {tasks.map(task => <TaskCard key={task.id} task={task} />)}
                        {status === 'completed' && <div className="text-center p-4 bg-green-900/50 rounded-lg text-green-300 font-bold">Mission Completed Successfully</div>}
                     </div>
                </div>
                {/* Column 3: Logs */}
                <div className="lg:col-span-1">
                     <h3 className="text-xl font-bold text-white mb-2">Synchronized LLM Context</h3>
                     <div className="flex flex-col h-[500px] space-y-2">
                        <div className="flex-1 bg-black/30 p-3 rounded-lg overflow-y-auto glow-green border border-green-500/30">
                            <h4 className="flex items-center gap-2 text-md font-semibold text-cyan-300 mb-2">
                                <LlmIcon llm="gemini" />
                                Gemini Log
                            </h4>
                            <pre className="text-xs font-mono whitespace-pre-wrap text-gray-300 space-y-1">{logs.gemini.map((l,i) => <div key={i}>{l}</div>)}</pre>
                        </div>
                         <div className="flex-1 bg-black/40 p-3 rounded-lg overflow-y-auto glow-green border border-green-500/30">
                             <h4 className="flex items-center gap-2 text-md font-semibold text-green-300 mb-2">
                                 <LlmIcon llm="openai" />
                                 OpenAI Log
                             </h4>
                             <pre className="text-xs font-mono whitespace-pre-wrap text-gray-300 space-y-1">{logs.openai.map((l,i) => <div key={i}>{l}</div>)}</pre>
                         </div>
                         <div className="flex-1 bg-black/50 p-3 rounded-lg overflow-y-auto glow-green border border-green-500/30">
                             <h4 className="flex items-center gap-2 text-md font-semibold text-yellow-300 mb-2">
                                 <LlmIcon llm="abacus" />
                                 Abacus Log
                             </h4>
                             <pre className="text-xs font-mono whitespace-pre-wrap text-gray-300 space-y-1">{logs.abacus.map((l,i) => <div key={i}>{l}</div>)}</pre>
                         </div>
                     </div>
                </div>
            </div>
        </div>
    );
}